#!/bin/zsh
#

sep=" %{Fcyan}| "
default="#90707070"

music () {
    glyph_music="\u266b"  #musicalnotedbl
}

mail () {
    glyph_mail="\u136"
}

clock () {
    glyph_clock="\uF109"
    clock_text=${glyph_clock}
    clock_color="#99802080"

    ret=$(date '+%a %d %b %Y %I:%M:%S %p %Z')

    echo "%{F${clock_color}}${clock_text} %{F${default}}${ret}"
}

battery() {
    glyph_battery_full="\uf100"
    glyph_battery_charging="\uf100"
    glyph_battery_20_0="\uf107"
    glyph_battery_40_20="\uf106"
    glyph_battery_60_40="\uf105"
    glyph_battery_80_60="\uf104"
    glyph_battery_80_90="\uf103"
    glyph_battery_90_100="\uf102"
    glyph_battery_100="\uf101"
    bat_color="#99106000"

    bat_status="/sys/class/power_supply/BAT1/status"
    ret=$(sed -n p "/sys/class/power_supply/BAT1/capacity")

    if test "$(cat $bat_status)" = "Charging"; then
        bat_text="${glyph_battery_charging}"
    elif test "$(cat $bat_status)" = "Full"; then
        bat_text="${glyph_battery_full}"
    else
        if test $ret -eq 100; then
            bat_text="${glyph_battery_100}"
        elif test $ret -le 100 -a $ret -gt 90; then
            bat_text="${glyph_battery_90_100}"
        elif test $ret -le 90 -a $ret -gt 80; then
            bat_text="${glyph_battery_80_90}"
        elif test $ret -le 80 -a $ret -gt 60; then
            bat_text="${glyph_battery_80_60}"
        elif test $ret -le 60 -a $ret -gt 40; then
            bat_text="${glyph_battery_60_40}"
        elif test $ret -le 40 -a $ret -gt 20; then
            bat_text="${glyph_battery_40_20}"
        elif test $ret -le 20; then
            bat_text="${glyph_battery_20_0}"
        fi
    fi
    echo "%{F${bat_color}}${bat_text} %{F${default}}${ret}%"
}

volume() {
    glyph_volume="\u00ed"
    glyph_volume_mute="\uf117"
    glyph_volume_100_80="\uf114"
    glyph_volume_80_50="\uf115"
    glyph_volume_50_0="\uf116"
    volume_color="#99804035"

    ret=$(amixer get Master | egrep -o "[0-9]+%" | head -1 | egrep -o "[0-9]*");
    if test $ret -le 100 -a $ret -gt 80; then
        volume_text="${glyph_volume_100_80}"
    elif test $ret -le 80 -a $ret -gt 50; then
        volume_text="${glyph_volume_80_50}"
    elif test $ret -le 50 -a $ret -gt 0; then
        volume_text="${glyph_volume_50_0}"
    elif test $ret -eq 0; then
        volume_text="${glyph_volume_mute}"
    fi
    echo "%{F${volume_color}}${volume_text} %{F${default}}${ret}%"
}

cpu () {
    glyph_cpu="\uf002"
    cpu_text="${glyph_cpu}"
    cpu_color="#90805050"

    ret=$(ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' | sed -n '1h;$!H;$g;s/\n/ +/gp' | bc)
    echo "%{F${cpu_color}}${cpu_text} %{F${default}}${ret}"
}

memory() {
    glyph_mem="\uf003"
    mem_text="${glyph_mem}"
    mem_color="#90509050"

    echo `grep -E 'Mem(Total|Free)' /proc/meminfo |awk '{print $2}'` | read t f
    ret=$(bc <<< "scale=2; 100 - $f / $t * 100" | cut -d. -f1)
    echo "%{F${mem_color}}${mem_text} %{F${default}}${ret}"
}

network() {
    network_color="#90503055"
    glyph_wire="\uf108"

    echo `ip link | sed -n 's/^[0-9]: \(.*\):.*$/\1/p'` | read lo int1 int2

    # check which interface is wifi
    if iwconfig $int1 >/dev/null 2>&1; then
        wifi=$int1
        eth0=$int2
    else
        wifi=$int2
        eth0=$int1
    fi

    # check if it's up
    addr=$(ifconfig $eth0| grep "inet " | awk '{print $2}')
    if test -n "$addr"; then
        int="$eth0"
        int_text=${glyph_wire}
    else
        addr=$(ifconfig $eth0| grep "inet " | awk '{print $2}')
        int="$wifi"
        int_text=${glyph_wifi_80_100}
    fi

    ip_addr=$(ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "$addr" || echo "Disconnected")

    echo "%{F${network_color}}${int_text} %{F${default}}${int}${ip_addr}"
}

weather() {
    glyph_weather="\u00d2"
    #weather_text="${glyph_weather}"
    weather_text="W"
    weather_color="#be9b7b00"

    ret=`python <<EOF
from yweather import Client
city, country = "Edmonton", "Canada"

if __name__ == '__main__':
    client = Client()
    try:
        weather = client.fetch_weather(client.fetch_woeid(city + ", " + country), metric=True)
        temp = weather["condition"]["temp"] + "Â°C "
        #humidity = "H " + weather["atmosphere"]["humidity"] + "%% "
        #wind_speed = "W " + weather["wind"]["speed"] + "km/h"
        #print(temp + humidity + wind_speed)
        print(temp)
    except IOError:
        print("Weather: -")
EOF`
    echo "%{F${weather_color}}${weather_text} %{F${default}}$ret"
}

loop () {
    focus_workspace="yellow"
    clock_info=""
    battery_info=""
    cpu_info=""
    mem_info=""
    network_info=""
    volume_info=""
    weather_info=""

    num_mon=$(bspc query -M | wc -l)
    while read -r line; do
        case $line in
            T*)
                title_info="${line#?}"
                [ ! -z ${title_info} ] && title_info=" - ${title_info}"
                ;;
            D*) # date
                clock_info="${line#?}${sep}"
                ;;
            C*)
                cpu_info="${line#?}${sep}"
                ;;
            M*)
                mem_info="${line#?}${sep}"
                ;;
            B*)
                battery_info="${line#?}${sep}"
                ;;
            N*)
                network_info="${line#?}${sep}"
                ;;
            V*)
                volume_info="${line#?}${sep}"
                ;;
            W*)
                wm_infos=""
                line=$(echo $line | sed 's/:/ /g')
                eval set -- "$line";
                while [ $# -gt 0 ] ; do
                    item=$1
                    name=${item#?}
                    case $item in
                        M*)
                            # active monitor
                            if [ $num_mon -gt 1 ] ; then
                                wm_infos="${wm_infos}${name}"
                            fi
                            ;;
                        m*)
                            # inactive monitor
                            if [ $num_mon -gt 1 ] ; then
                                wm_infos="${wm_infos}${name}"
                            fi
                            ;;
                        O*)
                            # focused occupied desktop
                            wm_infos="${wm_infos} %{F${focus_workspace}}${name}"
                            ;;
                        F*)
                            # focused free desktop
                            wm_infos="${wm_infos} %{F${focus_workspace}}${name}"
                            ;;
                        U*)
                            # focused urgent desktop
                            wm_infos="${wm_infos}%{F${default}}${name}"
                            ;;
                        o*)
                            # occupied desktop
                            wm_infos="${wm_infos} %{F${default}}${name}"
                            ;;
                        f*)
                            # free desktop
                            wm_infos="${wm_infos} %{F${default}}${name}"
                            ;;
                        u*)
                            # urgent desktop
                            wm_infos="${wm_infos}%{F${default}}${name}"
                            ;;
                        L*)
                            # layout
                            wm_infos="%{F${default}}[${name}]%{F${default}}${wm_infos}"
                            ;;
                    esac
                    shift
                done
                ;;
            R*)
                weather_info="${line#?}${sep}"
                ;;
        esac

        echo "%{l}${wm_infos}${title_info}%{r}${weather_info}${network_info}${cpu_info}${mem_info}${clock_info}${volume_info}${battery_info}" | sed "s/${sep}$/ /"
    done
}

register () {
    PANEL_FIFO=$1
    rm -rf  $PANEL_FIFO
    mkfifo $PANEL_FIFO

    # wm info, check if bspwm has launched, before subc
    while [ ! -e /tmp/bspwm*socket ]; do sleep 1; done
    pkill -x bspc; bspc control --subscribe > "$PANEL_FIFO" &
    # wm title
    xtitle -sf 'T%s' > "$PANEL_FIFO" &

    # script
    while true; do echo "D$(clock)"; sleep 1; done > $PANEL_FIFO &
    while true; do echo "B$(battery)"; sleep 1; done > $PANEL_FIFO &
    while true; do echo "C$(cpu)"; sleep 1; done > $PANEL_FIFO &
    while true; do echo "M$(memory)"; sleep 1; done > $PANEL_FIFO &
    while true; do echo "N$(network)"; sleep 2; done > $PANEL_FIFO &
    while true; do echo "V$(volume)"; sleep 2; done > $PANEL_FIFO &
    while true; do echo "R$(weather)"; sleep 5; done > $PANEL_FIFO &
}

main () {
   font="-xos4-Terminus-Medium-R-Normal--14-140-72-72-C-80-ISO10646-1"
   colo_background="#99050505"

   register "/tmp/panel-fifo"

   cat "/tmp/panel-fifo" | loop | bar -f ${font} -B ${colo_background}
   #cat "/tmp/panel-fifo" | loop
}


main $@
